import os
import requests
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS  # <-- Import CORS

app = Flask(__name__)

# Enable CORS for all routes and all origins
CORS(app, resources={r"/": {"origins": ""}})

# API_KEY = os.getenv("API_KEY")
API_KEY="AIzaSyABaZT80ukPbyZgcww2sPyTw1cWtnvwhVU"
API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={API_KEY}"

@app.route('/')
def index():
    """Renders the main HTML page."""
    return render_template('index.html')

@app.route('/api/generate', methods=['POST'])
def generate_text():
    """Handles user prompts and sends them to the Gemini API."""
    if not API_KEY:
        app.logger.error("API key is not set.")
        return jsonify({"error": "API key not set"}), 500

    try:
        data = request.get_json()
        prompt = data.get('prompt')

        if not prompt:
            return jsonify({"error": "No prompt provided"}), 400

        payload = {
            "contents": [
                {
                    "role": "user",
                    "parts": [
                        {"text": prompt}
                    ]
                }
            ]
        }

        response = requests.post(API_URL, json=payload)
        response.raise_for_status()
        result = response.json()

        if result.get('candidates') and result['candidates']:
            text_response = result['candidates'][0]['content']['parts'][0]['text']
            return jsonify({"response": text_response})
        else:
            app.logger.warning("No text generated by the model.")
            return jsonify({"error": "No text generated by the model."}), 500

    except requests.exceptions.RequestException as e:
        app.logger.error(f"API request failed: {e}")
        return jsonify({"error": "Failed to connect to the API."}), 500
    except Exception as e:
        app.logger.error(f"An unexpected error occurred: {e}")
        return jsonify({"error": "An unexpected error occurred."}), 500

if __name__ == '__main__':
    # In Kubernetes, host should be 0.0.0.0
    app.run(host='0.0.0.0', port=5000, debug=True)